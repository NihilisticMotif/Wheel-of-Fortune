needs 
 
# Keyword

1. module bundler
* A development tool that finds all the files that an application depends on and combines them into a single loadable file.
* https://dev.to/mustafamilyas/brief-explanation-of-javascript-module-bundler-b1k
* https://third-bit.com/sdxjs/module-bundler/#:~:text=A%20module%20bundler%20finds%20all,but%20just%20one%20network%20request.
2. Webpack
* Module bundler that is used with React to bundle and manage dependencies.
* https://www.scaler.com/topics/react/webpack-in-react/
3. search engine crawlers
* crawler or web spider, is a computer program that's used to search and automatically index website content and other information over the internet.
* https://www.techtarget.com/whatis/definition/crawler#:~:text=A%20web%20crawler%2C%20crawler%20or,for%20a%20search%20engine%20index.

 
# Files inside React

 
Reference
* https://create-react-app.dev/docs/folder-structure
 
 6. Project Configuration & Build Tools
 
 1. Folder Structure of React PWA.
 

Reference
 
  // Safely extract the coordinates using optional chaining
 

  // Filter for Bangkok data
 
console.log(SSData[0].geometry.coordinates)
 

const jsx_marker:JSX.Element[] = ls_marker.map((marker:I_Marker)=>(
    <Marker 
        position={marker.geocode} 
        icon={custom_icon}
    >
    <Popup>My name is {marker.pop_up}.</Popup>
    </Marker>
));
 
/* 
 
    console.log(city)
 
n
 

console.log(SSData[0]?.properties['name:en']);
 
    if([undefined, null].includes(city?.lat) || [undefined, null].includes(city?.lon)){
        return <></>
    }
 
"Loaded GeoJSON:", 
 
["properties"]
 
import useFetch from '../../../hooks/useFetch';
 
const { fetchCsvData }  = useFetch();
 
commonly 
 
older
 
 and file
 
3. Transform txt folders in to md files in Note folder.
 
```
 
# PWA Service Consideration

As the comment states, switching `serviceWorker.unregister()` to `serviceWorker.register()` will opt you in to using the service worker.

The reason is that 
* `serviceWorker.register()` make the app work better but harder to debug.

See PWA_Consideration.txt

Reference
* https://create-react-app.dev/docs/making-a-progressive-web-app/

 


To Do Now ()
1. Learn Folder Structure of React PWA.
2. Learn Basic of Asynchronous programming
3. 
 
Learn 
 
API 
 
//
 
// REFERENCE 
// 1. Youtube Video 
// * https://youtu.be/435HHLfR-c0?si=Jd6EH0_ElUCAem12
// 2. Code 
// * https://gist.github.com/thecodingloft/caec4950ce9e313ae33d77f000b20e76
 

// --- REFERENCE --------------------------------------------------------------------------------------------
// 1. React Leaflet Tutorial for Beginners (2023) by Alejandro AO - Software & Ai 
//  * https://youtu.be/jD6813wGdBA?si=e9sfhSiJeSYZ9Y1a
// 2. < TileLayer attribution = ? .../>
//  * https://leafletjs.com/
// 3. < TileLayer url = ? .../>
//  * https://leafletjs.com/
// 4. Icon({ iconUrl: ? ...})
//  * https://www.flaticon.com/
 
export default LT02_ImportCSV
 
import LT02_ImportCSV         from './Tutorial/Leaflet/T02_ImportCSV/main';
 
//const thai_city = SSData.map(recipe => (
//        <p>{recipe.name_en}</p>
//      ))
 
        console.log([city?.lat, city?.lon])
 
.filter(city => city.lat && city.lng)
 
    if(city === null){
        return <></>
    }
    else{
        
 
        let let_position = 
 
// 
 
typeof 
 
[0].lat
 
    else if(city?.lat === undefined || city?.lon === undefined){
        return <></>
    }
 
return 
 
    let letst = rue
 
    else{
 
_marker
 
function GetThaiCity():JSX.Element[]|JSX.Element{
    if (SSData is) {
        return <></>
    }
    else{
        return <h1>H</h1>
    }
}
 
const thai_city:JSX.Element[] = SSData.map(city => (
    <Marker 
        position={[city.lat, city.lon]} 
        icon={icon}
    >
    <Popup>
<h1>ชื่อ {city.name}</h1>
<h1>Name {city.name_en}</h1>
</Popup>
    </Marker>
))

 

console.log(typeof SSData[0].lat);

 
const thai_city_h1:JSX.Element[] = SSData.map(recipe => (
        <p>{recipe.name_en}</p>
      ))
 


// const jsx_marker:JSX.Element[] = SSData.features.map((key:any, i:number) => (<>{key}</>));
 
//
 
{thai_city_h1}
{
 
d
 
  console.log(SSData)
 
const [SSData, setSSCSV] = useState<any[]>([])
 
const { fetchCsvData }  = useFetch();
 
const [SSData, setSSData] = useState<any[]>([])
 
const thai_city_h1:JSX.Element[] = SSCSV.map(city =>(
<h1>{city.name_en}</h1>
))
 
<Marker 
        position={[13,100]} 
        icon={icon}
    >
    <Popup>
<h1>ชื่อ </h1>
</Popup>
    </Marker>
 
{//
 
<h1>Name </h1>
 
{city.name_en}
 
{city.name}
 
const thai_city:JSX.Element[] = SSCSV.map(city => (
    <Marker 
        position={[city.lon, city.lat]} 
        icon={icon}
    >
    <Popup>
<h1>ชื่อ {city.name}</h1>
<h1>Name {city.name_en}</h1>
</Popup>
    </Marker>
))
 
  console.log(data)
 
</MarkerClusterGroup>
 
<MarkerClusterGroup
    chunkedLoading
>
 
city.lat
 
<MarkerClusterGroup
chunkedLoading
></MarkerClusterGroup>
 
<CSVImporter
        // modalIsOpen={isOpen}
        // modalOnCloseTriggered={() => setIsOpen(false)}
        darkMode={true}
        onComplete={(data) => console.log(data)}
        template={{
          columns: [
            {
              name: "First Name",
              key: "first_name",
              required: true,
              description: "The first name of the user",
              suggested_mappings: ["First", "Name"],
            },
            {
              name: "Age",
              data_type: "number",
            },
          ],
        }}
      />
 
</h1>
 
custom_
 
<div>{home.home_name}</div>
 
return (
<>
{SSCSV}
</>
)
/*
 
import './App.css';
 
      <h1>Parse CSV files</h1>
 
recipe_
 
import data from './tutorialdata_01.geojson'
 
tutorial/
 
//   return (
//     <MapContainer center={SSCenter} zoom={SSZoom} style={{ height: '100vh', width: '100%' }}>
//       <TileLayer
//         attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
//         url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
//       />
// 
//       {/* Render Markers for Each City */}
//       {cityData.map((city, index) => (
//         <Marker key={index} position={[city.geometry.coordinates[1], city.geometry.coordinates[0]]}>
//           <Popup>
//             <strong>{city.properties["name:th"] || city.properties.name}</strong>
//             <br />
//             English: {city.properties["name:en"] || "N/A"}
//           </Popup>
//         </Marker>
//       ))}
//     </MapContainer>
//   );

 
import { GeoJSONData } from 'react-leaflet';
 
console.log(SSCSV)
 
.features
 
const data = require('./data/thai_city.geojson');
 
{jsx_marker}
 
.keys
 
(marker)=>(
    <Marker 
        position={marker.geocode} 
        icon={custom_icon}
    >
    <Popup>My name is {marker.pop_up}.</Popup>
    </Marker>
)
 
:I_Marker
 
import './city_in_Thailand.csv'
 
import './city_in_Thailand.csv'
 
import data from './thai_city.geojson'
 
 https://wiki.openstreetmap.org/wiki/Overpass_API/Overpass_QL#CSV_output_mode
// 3.
 

// Reference
// 1. https://stackoverflow.com/questions/23501075/getting-all-cities-in-a-specific-country-using-openstreetmap
// 2. https://wiki.openstreetmap.org/wiki/Overpass_API/Overpass_QL#CSV_output_mode
// 3. https://overpass-turbo.eu/
 
return (
<>
{SSCSV.map(home => <div>{home.home_name}</div>)}
</>
)
/*
 
const { fetchCsvData }  = useFetch();

useEffect(() => {
    fetchCsvData('./city_in_Thailand.csv', setSSCSV)
    console.log(JSON.stringify(SSCSV))
/*
// Output
[{"<!doctype_html>":"<html lang=\"en\">"},{"<!doctype_html>":"  <head>"},{"<!doctype_html>":"    <meta charset=\"utf-8\" />"},{"<!doctype_html>":"    <link rel=\"icon\" href=\"/favicon.ico\" />"},{"<!doctype_html>":"    <meta name=\"viewport\" content=\"width=device-width","__parsed_extra":[" initial-scale=1\" />"]},{"<!doctype_html>":"    <meta name=\"theme-color\" content=\"#000000\" />"},{"<!doctype_html>":"    <meta name=\"description\" content=\"Web site created using create-react-app\" />"},{"<!doctype_html>":"    <link rel=\"apple-touch-icon\" href=\"/logo192.png\" />"},{"<!doctype_html>":"    <!--"},{"<!doctype_html>":"      manifest.json provides metadata used when your web app is installed on a"},{"<!doctype_html>":"      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/"},{"<!doctype_html>":"    -->"},{"<!doctype_html>":"    <link rel=\"manifest\" href=\"/manifest.json\" />"},{"<!doctype_html>":"    <!--"},{"<!doctype_html>":"      Notice the use of  in the tags above."},{"<!doctype_html>":"      It will be replaced with the URL of the `public` folder during the build."},{"<!doctype_html>":"      Only files inside the `public` folder can be referenced from the HTML."},{"<!doctype_html>":null},{"<!doctype_html>":"      Unlike \"/favicon.ico\" or \"favicon.ico\"","__parsed_extra":[" \"/favicon.ico\" will"]},{"<!doctype_html>":"      work correctly both with client-side routing and a non-root public URL."},{"<!doctype_html>":"      Learn how to configure a non-root public URL by running `npm run build`."},{"<!doctype_html>":"    -->"},{"<!doctype_html>":"    <title>React App</title>"},{"<!doctype_html>":"  <script defer src=\"/static/js/bundle.js\"></script></head>"},{"<!doctype_html>":"  <body>"},{"<!doctype_html>":"    <noscript>You need to enable JavaScript to run this app.</noscript>"},{"<!doctype_html>":"    <div id=\"root\"></div>"},{"<!doctype_html>":"    <!--"},{"<!doctype_html>":"      This HTML file is a template."},{"<!doctype_html>":"      If you open it directly in the browser","__parsed_extra":[" you will see an empty page."]},{"<!doctype_html>":null},{"<!doctype_html>":"      You can add webfonts","__parsed_extra":[" meta tags"," or analytics to this file."]},{"<!doctype_html>":"      The build step will place the bundled scripts into the <body> tag."},{"<!doctype_html>":null},{"<!doctype_html>":"      To begin the development","__parsed_extra":[" run `npm start` or `yarn start`."]},{"<!doctype_html>":"      To create a production bundle","__parsed_extra":[" use `npm run build` or `yarn build`."]},{"<!doctype_html>":"    -->"},{"<!doctype_html>":"  </body>"},{"<!doctype_html>":"</html>"},{"<!doctype_html>":null}]
*/
}, [])
 
import useFetch from '../hooks/useFetch';
 
      {/* {polygonData.map((polygon) => (
        <Polygon
          key={polygon.id}
          positions={polygon.coordinates}
          color={polygon.workers === 0 ? "red" : "blue"}
          eventHandlers={{
            click: () => {
              setActivePolygon(polygon);
            }
          }}
        />
      ))} */}
      {/* {activePolygon && (
        <Popup
          position={[
            activePolygon.coordinates[0][0],
            activePolygon.coordinates[0][1],
            activePolygon.coordinates[0][2]
          ]}
          onClose={() => {
            setActivePolygon(null);
          }}
        >
          <div>
            <h2>Zone {activePolygon.id}</h2>
            <p>Workers: {activePolygon.workers}</p>
          </div>
        </Popup>
      )} */}
 
/Users/imac/Desktop/Wheel-of-Fortune/frontendpwa/src/TutorialPrem
 
Papa.parse(csvFile, {
    download: true,
    complete: function (input) {
         const records = input.data;
    }
});

 
.name
 
        console.log(csvString)
 
        console.log(decoder)
 
console.log(result)
 

    console.log(JSON.stringify(SSCSV))
 
import FileSaver from 'file-saver';
 
FileSaver.saveAs(sanitizedData, 'data.csv');
 
FileSaver.saveAs(data, 'data.csv');
 
        console.log(csvString)
 
        console.log(result)
 
console.log(sanitizedData)
 
        console.log(filePath)
 
console.log(filePath)
 
alert(csvString)
 
alert(item[key])
 
.name
 
.name
 
<Marker
position={[13.7, 100.5]} 
icon={icon}
>
<Popup>
Hello Bangkok.
The city full with 
Air pollution and Smile People
</Popup>
</Marker>
 
</>
 
data/recipe-database
 
import * as csvParse from 'csv-parse';
 
var myParser:csvParse.CsvParser = csvParse({delimiter: ','}, function(data, err) {
  console.log(data);
}) as csvParse.CsvParser;
 
() => 
 
import fs = require('fs');
var myParser:csvParse.CsvParser = csvParse({delimiter: ','}, function(data, err) {
  console.log(data);
});

 
import Papa from "papaparse";
 
<div className="App">
        {csv('data.csv').then(data => {
        console.log(data)
// perform all here
    });}
       </div>
 
import { csv } from 'd3'
 
// https://stackoverflow.com/questions/64732623/typescript-cannot-find-module-or-its-corresponding-type-declarations

 
city_in_Thailand from
 
.csv
 
.csv
 
custom_
 
custom_
 
divIcon, DivIcon, point, 
 
    maptiler : {
 
    }
 
'&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
 
const map_ref = useRef()
 
ref = {map_ref}
 
url = 'https://tile.openstreetmap.org/{z}/{x}/{y}.png'
 
'&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
 
import osm from './osm_provider';
 
'https://api.maptiler.com/maps/basic-v2/256/{z}/{x}/{y}.png?key=LbINzySRbeLOdAI74NWD'
 
import { Map } from "leaflet";
 
>

</Map>
 
3. 
 
How to get data from OSM and display in Leaflet ?
3.
 
 Now 
 
2. watch this
 
import HelloWorld02 from './HelloWorld02/main';
 
elloWorld01
 
    <hr/>
 
  <hr/>
 
// --- VARIABLE --------------------------------------------------------------------------------------------

 

// --- FUNCTION --------------------------------------------------------------------------------------------

 
import { ArtistLists , Artist} from './artist';
 
function ReturnColor(a:number):string{
  if (a%2==0){
    return 'Red'
  }
  else{
    return 'Blue'
  }
}

 
const JSX_Artist = ArtistLists.map((artist:Artist,index)=>
  <>
  <div className={ReturnColor(index)}>
    <h1>Name: {artist.Name}</h1>
    <li>NotableSong: {artist.NotableSong}</li>
    <li>BirthDate: {artist.BirthDate[0]} / {artist.BirthDate[1]} / {artist.BirthDate[2]}</li>
    <li>ActiveYear: {artist.ActiveYear[0]} - {artist.ActiveYear[1]}</li>
  </div>
  </>
)
 
  {JSX_Artist}
 
  <div className='Body'>
    <h1 style={{color: "rgb("+SS_Color[0].toString()+','+SS_Color[1].toString()+','+SS_Color[2].toString()+")"}}>CheChe</h1>
    <input id='ID_Input0' value={SS_StrColor[0]} onChange={() => {UpdateStrColor('0')}}></input>
    <input id='ID_Input1' value={SS_StrColor[1]} onChange={() => {UpdateStrColor('1')}}></input>
    <input id='ID_Input2' value={SS_StrColor[2]} onChange={() => {UpdateStrColor('2')}}></input>
    <button onClick={UpdateColor}>ChangeColor</button>
    <button onClick={ResetToBlack}>ResetToBlack</button>
  </div>
 
function UpdateColor():void{
  // https://stackoverflow.com/questions/53071851/getting-the-value-from-input-element-in-typescript
  const color0 = (document.getElementById("ID_Input0")as HTMLInputElement).value
  const color1 = (document.getElementById("ID_Input1")as HTMLInputElement).value
  const color2 = (document.getElementById("ID_Input2")as HTMLInputElement).value
  if (isNaN(parseFloat(color0))==false && isNaN(parseFloat(color1))==false && isNaN(parseFloat(color2))==false){
    const ColorLists = [parseFloat(color0),parseFloat(color1),parseFloat(color2)]
    let UpdateColor:[number,number,number] = [0,0,0]
    for(let i=0;i<3;i++){
      if (ColorLists[i]>255){
        UpdateColor[i] = 255
      }
      else if (ColorLists[i]<0){
        UpdateColor[i] = 0
      }
      else{
        UpdateColor[i] = ColorLists[i]
      }
    }
    setSS_Color(UpdateColor)
    setSS_StrColor([
      color0.toString(),
      color1.toString(),
      color2.toString()
    ])
  }
}

function UpdateStrColor(mode:'0'|'1'|'2'):void{
  // https://www.geeksforgeeks.org/react-onchange-event/
  const Input = (document.getElementById("ID_Input"+mode)as HTMLInputElement).value
  if (mode=='0'){
    setSS_StrColor([Input,SS_StrColor[1],SS_StrColor[2]])
  }
  if (mode=='1'){
    setSS_StrColor([SS_StrColor[0],Input,SS_StrColor[2]])
  }
  if (mode=='2'){
    setSS_StrColor([SS_StrColor[0],SS_StrColor[1],Input])
  }
}

function ResetToBlack():void{
  setSS_Color([0,0,0])
  setSS_StrColor(['0','0','0'])
}
 

// --- REACT HOOK --------------------------------------------------------------------------------------------
// * https://react.dev/reference/react/useState
const [SS_Color, setSS_Color] = useState<[number,number,number]>([0,0,0])
const [SS_StrColor, setSS_StrColor] = useState<[string,string,string]>(['0','0','0'])
 
import { Names } from './lists'
 
const JSX_Name = Names.map((name:string,index) =>
  <li>No.{index}: {name}</li>
);
 
// --- VARIABLE --------------------------------------------------------------------------------------------

const Variable: JSX.Element = <li>Invent new traffic lights</li>;
 

function Multiply(a: number, b: number):number {
  return a * b;}

function ReturnJSX(a: boolean):JSX.Element {
  if (a){return <li className='Red'>Color is Red</li>}
  else{return <li className='Blue'>Color is Blue</li>}}
 
  <hr/>
    <ul>
      {Variable}
      <li>Rehearse a movie scene {Multiply(3,5)}</li>
      {ReturnJSX(true)}
      {ReturnJSX(false)}
      <div className='Red'>
        {JSX_Name}
      </div>
    </ul>
    <hr/>
 
// --- REFERENCE --------------------------------------------------------------------------------------------
// 1. 
 
// * 
 
// Define Variable
 
const [SS_Color, setSS_Color] = useState<[number,number,number]>([0,0,0])
const [SS_StrColor, setSS_StrColor] = useState<[string,string,string]>(['0','0','0'])
 
import "leaflet.markercluster";
 
// import type { MarkerCluster } from 'leaflet.markercluster'; 
 
import { ls_marker, I_Marker } from './marker'
 
***/
 

/***
Relate Website
 
./../frontend/src
 
    <HelloMap/>
 

Reference 
 

import { pl } from 'react';

if (Platform.OS === 'ios') {
  // do something for ios
} else if (Platform.OS === 'android') {
  // other thing for android
} else if (Platform.OS === 'web') {
  // it's on web!
} else {
  // you probably won't end up here unless you support another platform!
}
 
Platform
 
/thisfoldershouldbeignore
 
 
 
 have instructions for using other methods
 
This might be because, there might be too much caching.

After the caching, the app 

Sometimes users will end up seeing older content until they 
close (reloading is not enough) their existing, open tabs. 
2. 
 

Framework
 
url = 'https://tiles.stadiamaps.com/tiles/stamen_watercolor/{z}/{x}/{y}.{ext}
 
rk">OpenMapTiles</a> &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors
 
get="_blank">Stamen Design</a> &copy; <a href="https://openmaptiles.org/" target="_blan
 
&copy; <a href="https://www.stadiamaps.com/" target="_blank">Stadia Maps</a> &copy; <a href="https://www.stamen.com/" ta
 
/3.0">CC BY 3.0</a> &mdash; Map data &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreet
 
Map tiles by <a href="http://stamen.com">Stamen Design</a>, <a href="http://creativecommons.org/licenses/by
 
const Stadia_StamenWatercolor = L.tileLayer('https://tiles.stadiamaps.com/tiles/stamen_watercolor/{z}/{x}/{y}.{ext}', {
	minZoom: 1,
	maxZoom: 16,
	attribution: '&copy; <a href="https://www.stadiamaps.com/" target="_blank">Stadia Maps</a> &copy; <a href="https://www.stamen.com/" target="_blank">Stamen Design</a> &copy; <a href="https://openmaptiles.org/" target="_blank">OpenMapTiles</a> &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
	ext: 'jpg'
});
 
<TileLayer
attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
url = 'https://tile.openstreetmap.org/{z}/{x}/{y}.png'
/>
 
const createClusterCustomIcon = function (cluster) {
  return new divIcon({
    html: `<span class="cluster-icon">${cluster.getChildCount()}</span>`,
    className: "custom-marker-cluster",
    iconSize: point(33, 33, true)
  });
};
const divIcon = new L.DivIcon();
      const markersCluster = new window.L.MarkerClusterGroup({ // Use window.L for plugins
        chunkedLoading: true,
        iconCreateFunction: function (cluster) {
          return divIcon({
            html: cluster.getChildCount(),
            className: "mycluster",
            iconSize: null,
          });
        },
});
 
    iconCreateFunction={cluster_custom_icon}
 
    iconCreateFunction={cluster_custom_icon}
 
</MarkerClusterGroup>
 
        key={marker.pop_up}
 
    </>
 
    <>
 
</>
 
    <>
 
    <>
 
    <>
 
</>
 
        {Variable}
 
{
    Name: 'Thom Yorke',
    BirthDate: [7, 10, 1968],
    ActiveYear: [1985, 'present'],
    NotableSong: 'Weird Fishes'
  },
  {
    Name: 'Adele',
    BirthDate: [5, 5, 1988],
    ActiveYear: [2006, 'present'],
    NotableSong: 'Rolling in the Deep'
  },
  {
    Name: 'Beyoncé',
    BirthDate: [4, 9, 1981],
    ActiveYear: [1997, 'present'],
    NotableSong: 'Single Ladies (Put a Ring on It)'
  },
  {
    Name: 'David Bowie',
    BirthDate: [8, 1, 1947],
    ActiveYear: [1964, 2016],
    NotableSong: 'Heroes'
  },
  {
    Name: 'Kurt Cobain',
    BirthDate: [20, 2, 1967],
    ActiveYear: [1987, 1994],
    NotableSong: 'Smells Like Teen Spirit'
  },
  {
    Name: 'Joni Mitchell',
    BirthDate: [7, 11, 1943],
    ActiveYear: [1964, 'present'],
    NotableSong: 'Big Yellow Taxi'
  }
 
url = 
 
// 
 
/* 
Other Related Website
1. https://stackoverflow.com/questions/66890855/property-center-does-not-exist-on-type-intrinsicattributes-mapcontainerprop
2. 
*/
 
<!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <title>Document</title>
    </head>
    <body>
        
    </body>
    </html>
 
3. useState Hook
 
{JSX_Artist}
 
{/*
 
*/}
 
        alert(ColorLists[i])
 
      alert(UpdateColor)
 
    color: greenyellow;
 
UpdateColor
 
Input
 
SS_StrColor[1]
 
() => 
 
  function RGBList(ls:[number,number,number]):[number,number,number]{
    let OutputLs:[number,number,number] = [0,0,0]
    for(let i=0;i<3;i++){
      if (ls[i]>255){
        OutputLs[i] = 255
      }
      else if (ls[i]<0){
        OutputLs[i] = 0
      }
      else{
        OutputLs[i] = ls[i]
      }
    }
    return OutputLs
  }
 
return OutputLs
 
.push(
 
,number,number
 
.value
 
[number,number,number]
 
1. Practice CSS
2. Practice Loop
 
#4. use Interface
 
    <TodoList/>
 
<li>NotableSong: {artist.NotableSong}</li>
 
      <h1>Hedy Lamarr's Todos</h1>
 
      <img
        src="https://i.imgur.com/yXOvdOSs.jpg"
        alt="Hedy Lamarr"
        className="photo"
      />
 
        <li>Improve spectrum technology</li>
 
</>
 
i
 
NameList
 
export Names 
 
 default
 
:number
 
:number
 
// Loop List
const Names:string[]=[
  'Mumu',
  'CheChe',
  'Tata',
  'Philip',
  'Emma',
  'Patee',
  'Kham',
  'Jojo',
  'Phoom',
  'Ami',
  'Non',
  'Amme'
]
 
const Names:string[]=[
  'Mumu',
  'CheChe',
  'Tata',
  'Philip',
  'Emma',
  'Patee',
  'Kham',
  'Jojo',
  'Phoom',
  'Ami',
  'Non',
  'Amme'
]

 
background-color: rgb(238, 130, 238);
 
background-color: rgb(238, 130, 238);
 
background-color: rgb(130, 238, 238);
 
238
 
  
 
    r
 
  
 
    
 
        <Box {is_red:true}/>
 
is_red={true}
 
Coding Smell
* 
 
Also create 
 
</>
 
<div className="App">
      <header className="App-header">
        <img src={logo} className="App-logo" alt="logo" />
        <p>
          Edit <code>src/App.tsx</code> and save to reload.
        </p>
        <a
          className="App-link"
          href="https://reactjs.org"
          target="_blank"
          rel="noopener noreferrer"
        >
          Learn React
        </a>
      </header>
    </div>
 
