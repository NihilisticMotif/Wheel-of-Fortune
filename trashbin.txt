3. 
 
How to get data from OSM and display in Leaflet ?
3.
 
 Now 
 
2. watch this
 
import HelloWorld02 from './HelloWorld02/main';
 
elloWorld01
 
    <hr/>
 
  <hr/>
 
// --- VARIABLE --------------------------------------------------------------------------------------------

 

// --- FUNCTION --------------------------------------------------------------------------------------------

 
import { ArtistLists , Artist} from './artist';
 
function ReturnColor(a:number):string{
  if (a%2==0){
    return 'Red'
  }
  else{
    return 'Blue'
  }
}

 
const JSX_Artist = ArtistLists.map((artist:Artist,index)=>
  <>
  <div className={ReturnColor(index)}>
    <h1>Name: {artist.Name}</h1>
    <li>NotableSong: {artist.NotableSong}</li>
    <li>BirthDate: {artist.BirthDate[0]} / {artist.BirthDate[1]} / {artist.BirthDate[2]}</li>
    <li>ActiveYear: {artist.ActiveYear[0]} - {artist.ActiveYear[1]}</li>
  </div>
  </>
)
 
  {JSX_Artist}
 
  <div className='Body'>
    <h1 style={{color: "rgb("+SS_Color[0].toString()+','+SS_Color[1].toString()+','+SS_Color[2].toString()+")"}}>CheChe</h1>
    <input id='ID_Input0' value={SS_StrColor[0]} onChange={() => {UpdateStrColor('0')}}></input>
    <input id='ID_Input1' value={SS_StrColor[1]} onChange={() => {UpdateStrColor('1')}}></input>
    <input id='ID_Input2' value={SS_StrColor[2]} onChange={() => {UpdateStrColor('2')}}></input>
    <button onClick={UpdateColor}>ChangeColor</button>
    <button onClick={ResetToBlack}>ResetToBlack</button>
  </div>
 
function UpdateColor():void{
  // https://stackoverflow.com/questions/53071851/getting-the-value-from-input-element-in-typescript
  const color0 = (document.getElementById("ID_Input0")as HTMLInputElement).value
  const color1 = (document.getElementById("ID_Input1")as HTMLInputElement).value
  const color2 = (document.getElementById("ID_Input2")as HTMLInputElement).value
  if (isNaN(parseFloat(color0))==false && isNaN(parseFloat(color1))==false && isNaN(parseFloat(color2))==false){
    const ColorLists = [parseFloat(color0),parseFloat(color1),parseFloat(color2)]
    let UpdateColor:[number,number,number] = [0,0,0]
    for(let i=0;i<3;i++){
      if (ColorLists[i]>255){
        UpdateColor[i] = 255
      }
      else if (ColorLists[i]<0){
        UpdateColor[i] = 0
      }
      else{
        UpdateColor[i] = ColorLists[i]
      }
    }
    setSS_Color(UpdateColor)
    setSS_StrColor([
      color0.toString(),
      color1.toString(),
      color2.toString()
    ])
  }
}

function UpdateStrColor(mode:'0'|'1'|'2'):void{
  // https://www.geeksforgeeks.org/react-onchange-event/
  const Input = (document.getElementById("ID_Input"+mode)as HTMLInputElement).value
  if (mode=='0'){
    setSS_StrColor([Input,SS_StrColor[1],SS_StrColor[2]])
  }
  if (mode=='1'){
    setSS_StrColor([SS_StrColor[0],Input,SS_StrColor[2]])
  }
  if (mode=='2'){
    setSS_StrColor([SS_StrColor[0],SS_StrColor[1],Input])
  }
}

function ResetToBlack():void{
  setSS_Color([0,0,0])
  setSS_StrColor(['0','0','0'])
}
 

// --- REACT HOOK --------------------------------------------------------------------------------------------
// * https://react.dev/reference/react/useState
const [SS_Color, setSS_Color] = useState<[number,number,number]>([0,0,0])
const [SS_StrColor, setSS_StrColor] = useState<[string,string,string]>(['0','0','0'])
 
import { Names } from './lists'
 
const JSX_Name = Names.map((name:string,index) =>
  <li>No.{index}: {name}</li>
);
 
// --- VARIABLE --------------------------------------------------------------------------------------------

const Variable: JSX.Element = <li>Invent new traffic lights</li>;
 

function Multiply(a: number, b: number):number {
  return a * b;}

function ReturnJSX(a: boolean):JSX.Element {
  if (a){return <li className='Red'>Color is Red</li>}
  else{return <li className='Blue'>Color is Blue</li>}}
 
  <hr/>
    <ul>
      {Variable}
      <li>Rehearse a movie scene {Multiply(3,5)}</li>
      {ReturnJSX(true)}
      {ReturnJSX(false)}
      <div className='Red'>
        {JSX_Name}
      </div>
    </ul>
    <hr/>
 
// --- REFERENCE --------------------------------------------------------------------------------------------
// 1. 
 
// * 
 
// Define Variable
 
const [SS_Color, setSS_Color] = useState<[number,number,number]>([0,0,0])
const [SS_StrColor, setSS_StrColor] = useState<[string,string,string]>(['0','0','0'])
 
import "leaflet.markercluster";
 
// import type { MarkerCluster } from 'leaflet.markercluster'; 
 
import { ls_marker, I_Marker } from './marker'
 
***/
 

/***
Relate Website
 
./../frontend/src
 
    <HelloMap/>
 

Reference 
 

import { pl } from 'react';

if (Platform.OS === 'ios') {
  // do something for ios
} else if (Platform.OS === 'android') {
  // other thing for android
} else if (Platform.OS === 'web') {
  // it's on web!
} else {
  // you probably won't end up here unless you support another platform!
}
 
Platform
 
/thisfoldershouldbeignore
 
 
 
 have instructions for using other methods
 
This might be because, there might be too much caching.

After the caching, the app 

Sometimes users will end up seeing older content until they 
close (reloading is not enough) their existing, open tabs. 
2. 
 

Framework
 
url = 'https://tiles.stadiamaps.com/tiles/stamen_watercolor/{z}/{x}/{y}.{ext}
 
rk">OpenMapTiles</a> &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors
 
get="_blank">Stamen Design</a> &copy; <a href="https://openmaptiles.org/" target="_blan
 
&copy; <a href="https://www.stadiamaps.com/" target="_blank">Stadia Maps</a> &copy; <a href="https://www.stamen.com/" ta
 
/3.0">CC BY 3.0</a> &mdash; Map data &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreet
 
Map tiles by <a href="http://stamen.com">Stamen Design</a>, <a href="http://creativecommons.org/licenses/by
 
const Stadia_StamenWatercolor = L.tileLayer('https://tiles.stadiamaps.com/tiles/stamen_watercolor/{z}/{x}/{y}.{ext}', {
	minZoom: 1,
	maxZoom: 16,
	attribution: '&copy; <a href="https://www.stadiamaps.com/" target="_blank">Stadia Maps</a> &copy; <a href="https://www.stamen.com/" target="_blank">Stamen Design</a> &copy; <a href="https://openmaptiles.org/" target="_blank">OpenMapTiles</a> &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
	ext: 'jpg'
});
 
<TileLayer
attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
url = 'https://tile.openstreetmap.org/{z}/{x}/{y}.png'
/>
 
const createClusterCustomIcon = function (cluster) {
  return new divIcon({
    html: `<span class="cluster-icon">${cluster.getChildCount()}</span>`,
    className: "custom-marker-cluster",
    iconSize: point(33, 33, true)
  });
};
const divIcon = new L.DivIcon();
      const markersCluster = new window.L.MarkerClusterGroup({ // Use window.L for plugins
        chunkedLoading: true,
        iconCreateFunction: function (cluster) {
          return divIcon({
            html: cluster.getChildCount(),
            className: "mycluster",
            iconSize: null,
          });
        },
});
 
    iconCreateFunction={cluster_custom_icon}
 
    iconCreateFunction={cluster_custom_icon}
 
</MarkerClusterGroup>
 
        key={marker.pop_up}
 
    </>
 
    <>
 
</>
 
    <>
 
    <>
 
    <>
 
</>
 
        {Variable}
 
{
    Name: 'Thom Yorke',
    BirthDate: [7, 10, 1968],
    ActiveYear: [1985, 'present'],
    NotableSong: 'Weird Fishes'
  },
  {
    Name: 'Adele',
    BirthDate: [5, 5, 1988],
    ActiveYear: [2006, 'present'],
    NotableSong: 'Rolling in the Deep'
  },
  {
    Name: 'Beyonc√©',
    BirthDate: [4, 9, 1981],
    ActiveYear: [1997, 'present'],
    NotableSong: 'Single Ladies (Put a Ring on It)'
  },
  {
    Name: 'David Bowie',
    BirthDate: [8, 1, 1947],
    ActiveYear: [1964, 2016],
    NotableSong: 'Heroes'
  },
  {
    Name: 'Kurt Cobain',
    BirthDate: [20, 2, 1967],
    ActiveYear: [1987, 1994],
    NotableSong: 'Smells Like Teen Spirit'
  },
  {
    Name: 'Joni Mitchell',
    BirthDate: [7, 11, 1943],
    ActiveYear: [1964, 'present'],
    NotableSong: 'Big Yellow Taxi'
  }
 
url = 
 
// 
 
/* 
Other Related Website
1. https://stackoverflow.com/questions/66890855/property-center-does-not-exist-on-type-intrinsicattributes-mapcontainerprop
2. 
*/
 
<!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <title>Document</title>
    </head>
    <body>
        
    </body>
    </html>
 
3. useState Hook
 
{JSX_Artist}
 
{/*
 
*/}
 
        alert(ColorLists[i])
 
      alert(UpdateColor)
 
    color: greenyellow;
 
UpdateColor
 
Input
 
SS_StrColor[1]
 
() => 
 
  function RGBList(ls:[number,number,number]):[number,number,number]{
    let OutputLs:[number,number,number] = [0,0,0]
    for(let i=0;i<3;i++){
      if (ls[i]>255){
        OutputLs[i] = 255
      }
      else if (ls[i]<0){
        OutputLs[i] = 0
      }
      else{
        OutputLs[i] = ls[i]
      }
    }
    return OutputLs
  }
 
return OutputLs
 
.push(
 
,number,number
 
.value
 
[number,number,number]
 
1. Practice CSS
2. Practice Loop
 
#4. use Interface
 
    <TodoList/>
 
<li>NotableSong: {artist.NotableSong}</li>
 
      <h1>Hedy Lamarr's Todos</h1>
 
      <img
        src="https://i.imgur.com/yXOvdOSs.jpg"
        alt="Hedy Lamarr"
        className="photo"
      />
 
        <li>Improve spectrum technology</li>
 
</>
 
i
 
NameList
 
export Names 
 
 default
 
:number
 
:number
 
// Loop List
const Names:string[]=[
  'Mumu',
  'CheChe',
  'Tata',
  'Philip',
  'Emma',
  'Patee',
  'Kham',
  'Jojo',
  'Phoom',
  'Ami',
  'Non',
  'Amme'
]
 
const Names:string[]=[
  'Mumu',
  'CheChe',
  'Tata',
  'Philip',
  'Emma',
  'Patee',
  'Kham',
  'Jojo',
  'Phoom',
  'Ami',
  'Non',
  'Amme'
]

 
background-color: rgb(238, 130, 238);
 
background-color: rgb(238, 130, 238);
 
background-color: rgb(130, 238, 238);
 
238
 
  
 
    r
 
  
 
    
 
        <Box {is_red:true}/>
 
is_red={true}
 
Coding Smell
* 
 
Also create 
 
</>
 
<div className="App">
      <header className="App-header">
        <img src={logo} className="App-logo" alt="logo" />
        <p>
          Edit <code>src/App.tsx</code> and save to reload.
        </p>
        <a
          className="App-link"
          href="https://reactjs.org"
          target="_blank"
          rel="noopener noreferrer"
        >
          Learn React
        </a>
      </header>
    </div>
 
